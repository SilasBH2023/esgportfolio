# ESG with Expected return and Beta
import pandas as pd
import yfinance as yf
import numpy as np
import statsmodels.api as sm
import os
# -----------------------------
# Step 1: S&P 500 tickers
# -----------------------------
url = "https://en.wikipedia.org/wiki/List_of_S%26P_500_companies"
sp500_table = pd.read_html(url)[0]
tickers = sp500_table['Symbol'].tolist()
tickers = [t.replace('.', '-') for t in tickers]

# -----------------------------
# Step 2: Download S&P 500 index for beta calculation
# -----------------------------
sp500_index = yf.download("^GSPC", period="1y", progress=False)
if "Adj Close" in sp500_index.columns:
    sp500_prices = sp500_index["Adj Close"]
else:
    sp500_prices = sp500_index["Close"]
sp500_returns = sp500_prices.pct_change().dropna()

# -----------------------------
# Step 3: Loop through tickers
# -----------------------------
results = []

for ticker in tickers:
    try:
        stock = yf.Ticker(ticker)

        # ESG data
        try:
            esg = stock.sustainability
            total_esg = esg.loc['totalEsg'].values[0] if esg is not None else np.nan
        except Exception:
            total_esg = np.nan

        # Historical prices
        data = yf.download(ticker, period="1y", progress=False)
        if "Adj Close" in data.columns:
            prices = data["Adj Close"]
        else:
            prices = data["Close"]
        returns = prices.pct_change().dropna()

        # Expected return (annualized)
        exp_return = returns.mean() * 252 if not returns.empty else np.nan

        # Beta vs S&P 500
        beta = np.nan
        if len(returns) == len(sp500_returns):
            X = sm.add_constant(sp500_returns.values)
            model = sm.OLS(returns.values, X).fit()
            beta = model.params[1]

        results.append({
            'Ticker': ticker,
            'TotalESG': total_esg,
            'ExpectedReturn': exp_return,
            'Beta': beta
        })
        print(f"Processed: {ticker}")

    except Exception as e:
        print(f"Skipped {ticker}: {e}")
    

# -----------------------------
# Step 4: Save results
# -----------------------------
df = pd.DataFrame(results)
df.to_csv("SP500_ESG_Return_Beta.csv", index=False)
print("Saved ESG, Expected Return, and Beta!")
print("Saved file at:", os.path.abspath("SP500_ESG_Return_Beta.csv"))

